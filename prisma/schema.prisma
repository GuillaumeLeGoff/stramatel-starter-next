// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  password   String
  language   String
  theme      String
  role       String      @default("USER")
  slideshows Slideshow[]
  schedules  Schedule[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Media {
  id               Int      @id @default(autoincrement())
  originalFileName String
  fileName         String
  path             String
  format           String
  type             String
  size             Int
  uploadedAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  thumbnail        Media?   @relation("MediaToThumbnail", fields: [thumbnailId], references: [id])
  thumbnailId      Int?
  thumbnails       Media[]  @relation("MediaToThumbnail")
  slides           Slide[]
}

model Slideshow {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdBy   Int
  user        User       @relation(fields: [createdBy], references: [id])
  slides      Slide[]
  modes       Mode[]
  schedules   Schedule[]
}

model Slide {
  id          Int       @id @default(autoincrement())
  slideshowId Int
  position    Int
  duration    Int       @default(5)
  konvaData   Json?
  mediaId     Int?
  media       Media?    @relation(fields: [mediaId], references: [id])
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
}

model Mode {
  id          Int       @id @default(autoincrement())
  name        String
  slideshowId Int
  settings    Json?
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
}

// Nouveau modèle pour la planification des slideshows
model Schedule {
  id           Int                @id @default(autoincrement())
  title        String
  description  String?
  slideshowId  Int
  slideshow    Slideshow          @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
  createdBy    Int
  user         User               @relation(fields: [createdBy], references: [id])
  
  // Dates et heures
  startDate    DateTime
  endDate      DateTime?
  startTime    String             // Format HH:mm
  endTime      String?            // Format HH:mm
  allDay       Boolean            @default(false)
  
  // Récurrence
  isRecurring  Boolean            @default(false)
  recurrence   ScheduleRecurrence?
  
  // Statut et priorité
  status       ScheduleStatus     @default(ACTIVE)
  priority     SchedulePriority   @default(NORMAL)
  color        String?            // Couleur pour l'affichage dans le calendrier
  
  // Métadonnées
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  // Relations
  exceptions   ScheduleException[]
}

// Modèle pour gérer la récurrence des événements
model ScheduleRecurrence {
  id          Int              @id @default(autoincrement())
  scheduleId  Int              @unique
  schedule    Schedule         @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  // Type de récurrence
  type        RecurrenceType   // DAILY, WEEKLY, MONTHLY, YEARLY
  interval    Int              @default(1) // Tous les X jours/semaines/mois/années
  
  // Pour récurrence hebdomadaire - jours de la semaine (0=dimanche, 6=samedi)
  daysOfWeek  String?          // JSON array: [1,2,3,4,5] pour lun-ven
  
  // Pour récurrence mensuelle
  dayOfMonth  Int?             // Jour du mois (1-31)
  weekOfMonth Int?             // Semaine du mois (1-4, -1 pour dernière)
  
  // Fin de récurrence
  endDate     DateTime?        // Date de fin de récurrence
  occurrences Int?             // Nombre d'occurrences
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Modèle pour les exceptions dans la récurrence
model ScheduleException {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  // Date de l'exception
  exceptionDate DateTime
  
  // Type d'exception
  type       ExceptionType // CANCELLED, MODIFIED
  
  // Nouvelles valeurs si modifié
  newStartTime String?
  newEndTime   String?
  newTitle     String?
  
  createdAt  DateTime @default(now())
}

model AppSettings {
  id               Int      @id @default(autoincrement())
  standby          Boolean
  standbyStartTime DateTime
  standbyEndTime   DateTime
  restartAt        DateTime
  updatedAt        DateTime @updatedAt
  brightness       Int
  width            Int      @default(1920)
  height           Int      @default(1080)
}

// Enums pour la planification
enum ScheduleStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum SchedulePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ExceptionType {
  CANCELLED
  MODIFIED
}
