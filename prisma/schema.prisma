// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String
  language           String
  theme              String
  role               String               @default("USER")
  slideshows         Slideshow[]
  schedules          Schedule[]
  securityEvents     SecurityEvent[]
  securityIndicators SecurityIndicators[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id               Int      @id @default(autoincrement())
  originalFileName String
  fileName         String
  path             String
  format           String
  type             String
  size             Int
  uploadedAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  thumbnail        Media?   @relation("MediaToThumbnail", fields: [thumbnailId], references: [id])
  thumbnailId      Int?
  thumbnails       Media[]  @relation("MediaToThumbnail")
  slides           Slide[]  @relation("SlideMedia")
}

model Slideshow {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdBy   Int
  user        User       @relation(fields: [createdBy], references: [id])
  slides      Slide[]
  modes       Mode[]
  schedules   Schedule[]
}

model Slide {
  id          Int       @id @default(autoincrement())
  slideshowId Int
  position    Int
  duration    Int       @default(5)
  konvaData   Json?
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
  media       Media[]   @relation("SlideMedia")
}

model Mode {
  id          Int       @id @default(autoincrement())
  name        String
  slideshowId Int
  settings    Json?
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
}

model AppSettings {
  id         Int      @id @default(autoincrement())
  restartAt  DateTime
  updatedAt  DateTime @updatedAt
  brightness Int
  width      Int      @default(1920)
  height     Int      @default(1080)
}

// Modèles pour la planification
model Schedule {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  slideshowId Int
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
  createdBy   Int
  user        User      @relation(fields: [createdBy], references: [id])

  // Dates et heures
  startDate DateTime
  endDate   DateTime?
  startTime String // Format HH:mm
  endTime   String? // Format HH:mm
  allDay    Boolean   @default(false)

  // Récurrence
  isRecurring Boolean             @default(false)
  recurrence  ScheduleRecurrence?

  // Couleur
  color String?

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exceptions ScheduleException[]
}

model ScheduleRecurrence {
  id         Int      @id @default(autoincrement())
  scheduleId Int      @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  // Type de récurrence
  type     RecurrenceType
  interval Int            @default(1)

  // Pour récurrence hebdomadaire (stocké comme JSON string)
  daysOfWeek String?

  // Pour récurrence mensuelle
  dayOfMonth  Int?
  weekOfMonth Int?

  // Fin de récurrence
  endDate     DateTime?
  occurrences Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleException {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  // Date de l'exception
  exceptionDate DateTime

  // Nouvelles valeurs si modifié
  newStartTime String?
  newEndTime   String?
  newTitle     String?

  createdAt DateTime @default(now())
}

// Enums pour la planification
enum ScheduleStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

// Modèles pour les indicateurs de sécurité
model SecurityEvent {
  id           Int               @id @default(autoincrement())
  date         DateTime
  description  String?
  location     String?
  severity     SecuritySeverity?
  withWorkStop Boolean           @default(false)
  isReference  Boolean           @default(false)
  createdBy    Int
  user         User              @relation(fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecurityIndicators {
  id                                    Int       @id @default(autoincrement())
  lastAccidentDate                      DateTime?
  lastAccidentWithStopDate              DateTime?
  lastAccidentWithoutStopDate           DateTime?
  recordStartDate                       DateTime?
  monitoringStartDate                   DateTime? // Date de début du suivi des accidents
  currentDaysWithoutAccident            Int       @default(0)
  currentDaysWithoutAccidentWithStop    Int       @default(0)
  currentDaysWithoutAccidentWithoutStop Int       @default(0)
  recordDaysWithoutAccident             Int       @default(0)
  recordDaysWithoutAccidentDate         DateTime?
  yearlyAccidentsCount                  Int       @default(0)
  yearlyAccidentsWithStopCount          Int       @default(0)
  yearlyAccidentsWithoutStopCount       Int       @default(0)
  yearlyMinorCareCount                  Int       @default(0)
  yearlyNearMissCount                   Int       @default(0)
  yearlyDangerousSituationCount         Int       @default(0)
  monthlyAccidentsCount                 Int       @default(0)
  referenceYear                         Int
  referenceMonth                        Int
  updatedAt                             DateTime  @updatedAt
  updatedBy                             Int
  user                                  User      @relation(fields: [updatedBy], references: [id])
}

// Enums pour la sécurité
enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
