#!/usr/bin/env npx ts-node

import { PrismaClient } from '@prisma/client';
import { SecurityService } from '../src/features/security/services/securityService';
import { SecurityEventType, SecuritySeverity } from '../src/features/security/types';

const prisma = new PrismaClient();

async function initSecurity() {
  console.log('üîß Initialisation du syst√®me de s√©curit√©...');

  try {
    // V√©rifier si un utilisateur existe
    const existingUser = await prisma.user.findFirst();
    let systemUserId = 1;

    if (!existingUser) {
      console.log('üë§ Cr√©ation d\'un utilisateur syst√®me...');
      const systemUser = await prisma.user.create({
        data: {
          username: 'system',
          password: 'system_password', // √Ä changer en production
          language: 'fr',
          theme: 'light',
          role: 'ADMIN'
        }
      });
      systemUserId = systemUser.id;
      console.log('‚úÖ Utilisateur syst√®me cr√©√© avec l\'ID:', systemUserId);
    } else {
      systemUserId = existingUser.id;
      console.log('‚úÖ Utilisateur existant trouv√© avec l\'ID:', systemUserId);
    }

    // Initialiser les indicateurs de s√©curit√©
    console.log('üìä Initialisation des indicateurs de s√©curit√©...');
    await SecurityService.initializeIndicators(systemUserId);

    // Cr√©er quelques √©v√©nements de test (optionnel)
    console.log('üî¨ Cr√©ation d\'√©v√©nements de test...');
    
    const testEvents = [
      {
        type: SecurityEventType.ACCIDENT_WITH_STOP,
        date: new Date('2024-01-15'),
        description: 'Chute dans l\'atelier de production',
        location: 'Atelier A',
        severity: SecuritySeverity.MEDIUM,
        withWorkStop: true,
        createdBy: systemUserId
      },
      {
        type: SecurityEventType.NEAR_MISS,
        date: new Date('2024-03-20'),
        description: 'Presque collision entre deux v√©hicules',
        location: 'Parking',
        severity: SecuritySeverity.LOW,
        withWorkStop: false,
        createdBy: systemUserId
      },
      {
        type: SecurityEventType.DANGEROUS_SITUATION,
        date: new Date('2024-06-10'),
        description: 'Produit chimique renvers√© non signal√©',
        location: 'Laboratoire',
        severity: SecuritySeverity.HIGH,
        withWorkStop: false,
        createdBy: systemUserId
      }
    ];

    for (const eventData of testEvents) {
      await SecurityService.createSecurityEvent(eventData);
      console.log(`‚úÖ √âv√©nement cr√©√©: ${eventData.type} - ${eventData.description}`);
    }

    // Afficher les indicateurs cr√©√©s
    console.log('\nüìà Indicateurs actuels:');
    const indicators = await SecurityService.getDigitalIndicators();
    
    console.log(`- Jours sans accident: ${indicators.daysWithoutAccident}`);
    console.log(`- Jours sans accident avec arr√™t: ${indicators.daysWithoutAccidentWithStop}`);
    console.log(`- Jours sans accident sans arr√™t: ${indicators.daysWithoutAccidentWithoutStop}`);
    console.log(`- Record de jours sans accident: ${indicators.recordDaysWithoutAccident}`);
    console.log(`- Derni√®re date d'accident: ${indicators.lastAccidentDate?.toLocaleDateString('fr-FR') || 'Aucun'}`);
    console.log(`- Accidents cette ann√©e: ${indicators.currentYearAccidents}`);
    console.log(`- Soins b√©nins cette ann√©e: ${indicators.currentYearMinorCare}`);
    console.log(`- Presqu'accidents cette ann√©e: ${indicators.currentYearNearMiss}`);
    console.log(`- Situations dangereuses cette ann√©e: ${indicators.currentYearDangerousSituations}`);
    console.log(`- Accidents ce mois: ${indicators.currentMonthAccidents}`);

    console.log('\nüéâ Initialisation termin√©e avec succ√®s!');
    console.log('\nüìã Endpoints disponibles:');
    console.log('- GET /api/security/indicators - R√©cup√©rer les indicateurs');
    console.log('- GET /api/security/indicators?days=30 - Accidents des 30 derniers jours');
    console.log('- POST /api/security/events - Cr√©er un √©v√©nement');
    console.log('- GET /api/security/events - Lister les √©v√©nements');
    console.log('- GET /api/security/statistics - Statistiques');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanTestData() {
  console.log('üßπ Nettoyage des donn√©es de test...');
  
  try {
    await prisma.securityEvent.deleteMany({});
    await prisma.securityIndicators.deleteMany({});
    console.log('‚úÖ Donn√©es de test nettoy√©es');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'clean') {
    cleanTestData();
  } else {
    initSecurity();
  }
}

export { initSecurity, cleanTestData }; 